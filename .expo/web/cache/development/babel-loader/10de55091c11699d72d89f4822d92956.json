{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/drawer/src/views/DrawerItemList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/native';\nimport { DrawerActions } from '@react-navigation/routers';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeTintColor = _ref.activeTintColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      labelStyle: labelStyle,\n      style: itemStyle,\n      onPress: function onPress() {\n        navigation.dispatch(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate(route.name), {\n          target: state.key\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      }\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["state","navigation","descriptors","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","itemStyle","labelStyle","focused","i","title","drawerLabel","drawerIcon","route","DrawerActions","CommonActions","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,0BAAA;AACA,SAAA,aAAA,QAAA,2BAAA;AAIA,OAAA,UAAA;AAgBA,eAAe,SAAA,cAAA,CAAA,IAAA,EAUL;AATRA,MAAAA,KASQ,GAAA,IAAA,CATRA,KAAAA;AAAAA,MACAC,UAQQ,GAAA,IAAA,CARRA,UADAD;AAAAA,MAEAE,WAOQ,GAAA,IAAA,CAPRA,WAFAF;AAAAA,MAGAG,eAMQ,GAAA,IAAA,CANRA,eAHAH;AAAAA,MAIAI,iBAKQ,GAAA,IAAA,CALRA,iBAJAJ;AAAAA,MAKAK,qBAIQ,GAAA,IAAA,CAJRA,qBALAL;AAAAA,MAMAM,uBAGQ,GAAA,IAAA,CAHRA,uBANAN;AAAAA,MAOAO,SAEQ,GAAA,IAAA,CAFRA,SAPAP;AAAAA,MAQAQ,UACQ,GAAA,IAAA,CADRA,UARAR;AAUA,SAAQA,KAAK,CAALA,MAAAA,CAAAA,GAAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;AACrC,QAAMS,OAAO,GAAGC,CAAC,KAAKV,KAAK,CAA3B,KAAA;AADqC,QAAA,qBAAA,GAEME,WAAW,CAACY,KAAK,CAAjBZ,GAAW,CAAXA,CAFN,OAAA;AAAA,QAE7BS,KAF6B,GAAA,qBAAA,CAAA,KAAA;AAAA,QAEtBC,WAFsB,GAAA,qBAAA,CAAA,WAAA;AAAA,QAETC,UAFS,GAAA,qBAAA,CAAA,UAAA;AAIrC,WACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,MAAA,GAAG,EAAEC,KAAK,CADZ,GAAA;AAEE,MAAA,KAAK,EACHF,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEID,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAG,KAAK,CAPb,IAAA;AASE,MAAA,IAAI,EATN,UAAA;AAUE,MAAA,OAAO,EAVT,OAAA;AAWE,MAAA,eAAe,EAXjB,eAAA;AAYE,MAAA,iBAAiB,EAZnB,iBAAA;AAaE,MAAA,qBAAqB,EAbvB,qBAAA;AAcE,MAAA,uBAAuB,EAdzB,uBAAA;AAeE,MAAA,UAAU,EAfZ,UAAA;AAgBE,MAAA,KAAK,EAhBP,SAAA;AAiBE,MAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACbb,QAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACMQ,OAAO,GACPM,aAAa,CADN,WACPA,EADO,GAEPC,aAAa,CAAbA,QAAAA,CAAuBF,KAAK,CAHlCb,IAGMe,CAHNf,EAAAA;AAIEgB,UAAAA,MAAM,EAAEjB,KAAK,CAJfC;AAAAA,SAAAA,CAAAA;AAlBJ,OAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EADF;AACE;AAAA,KAAA,CADF;AAJF,GAAQD,CAAR;AAiCD","sourcesContent":["import * as React from 'react';\nimport { CommonActions } from '@react-navigation/native';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n} from '@react-navigation/routers';\nimport DrawerItem from './DrawerItem';\nimport {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}