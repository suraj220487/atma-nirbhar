{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState } from '@react-navigation/core';\n\nvar getStateLength = function getStateLength(state) {\n  var length = 0;\n\n  if (state.history) {\n    length = state.history.length;\n  } else {\n    length = state.index + 1;\n  }\n\n  var focusedState = state.routes[state.index].state;\n\n  if (focusedState && !focusedState.stale) {\n    length += getStateLength(focusedState) - 1;\n  }\n\n  return length;\n};\n\nvar isUsingLinking = false;\nexport default function useLinking(ref, _ref) {\n  var prefixes = _ref.prefixes,\n      config = _ref.config,\n      _ref$getStateFromPath = _ref.getStateFromPath,\n      getStateFromPath = _ref$getStateFromPath === void 0 ? getStateFromPathDefault : _ref$getStateFromPath,\n      _ref$getPathFromState = _ref.getPathFromState,\n      getPathFromState = _ref$getPathFromState === void 0 ? getPathFromStateDefault : _ref$getPathFromState;\n  React.useEffect(function () {\n    if (isUsingLinking) {\n      throw new Error(\"Looks like you are using 'useLinking' in multiple components. This is likely an error since URL integration should only be handled in one place to avoid conflicts.\");\n    } else {\n      isUsingLinking = true;\n    }\n\n    return function () {\n      isUsingLinking = false;\n    };\n  });\n  var prefixesRef = React.useRef(prefixes);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(function () {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, getPathFromState, getStateFromPath, prefixes]);\n  var getInitialState = React.useCallback(function () {\n    var path = location.pathname + location.search;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, []);\n  var previousStateLengthRef = React.useRef(undefined);\n  var previousHistoryIndexRef = React.useRef(0);\n  var pendingIndexChangeRef = React.useRef();\n  var pendingStateUpdateRef = React.useRef(false);\n  var pendingStateMultiUpdateRef = React.useRef(false);\n  var numberOfIndicesAhead = React.useRef(0);\n  React.useEffect(function () {\n    window.addEventListener('popstate', function () {\n      var _ref2, _history$state;\n\n      var navigation = ref.current;\n\n      if (!navigation) {\n        return;\n      }\n\n      var previousHistoryIndex = previousHistoryIndexRef.current;\n      var historyIndex = (_ref2 = (_history$state = history.state) == null ? void 0 : _history$state.index) != null ? _ref2 : 0;\n      previousHistoryIndexRef.current = historyIndex;\n\n      if (pendingIndexChangeRef.current === historyIndex) {\n        pendingIndexChangeRef.current = undefined;\n        return;\n      }\n\n      var state = navigation.getRootState();\n      var path = getPathFromStateRef.current(state, configRef.current);\n      var canGoBack = true;\n      var numberOfBacks = 0;\n\n      if (previousHistoryIndex === historyIndex) {\n        if (location.pathname + location.search !== path) {\n          pendingStateUpdateRef.current = true;\n          history.replaceState({\n            index: historyIndex\n          }, '', path);\n        }\n      } else if (previousHistoryIndex > historyIndex) {\n        numberOfBacks = previousHistoryIndex - historyIndex - numberOfIndicesAhead.current;\n\n        if (numberOfBacks > 0) {\n          pendingStateMultiUpdateRef.current = true;\n\n          if (numberOfBacks > 1) {\n            pendingStateMultiUpdateRef.current = true;\n          }\n\n          pendingStateUpdateRef.current = true;\n\n          for (var i = 0; i < numberOfBacks; i++) {\n            navigation.goBack();\n          }\n        } else {\n          canGoBack = false;\n        }\n      }\n\n      if (previousHistoryIndex < historyIndex || !canGoBack) {\n        if (canGoBack) {\n          numberOfIndicesAhead.current = historyIndex - previousHistoryIndex - 1;\n        } else {\n          navigation.goBack();\n          numberOfIndicesAhead.current -= previousHistoryIndex - historyIndex;\n        }\n\n        var _state = getStateFromPathRef.current(location.pathname + location.search, configRef.current);\n\n        pendingStateMultiUpdateRef.current = true;\n\n        if (_state) {\n          var action = getActionFromState(_state);\n          pendingStateUpdateRef.current = true;\n\n          if (action.type === 'RESET_ROOT') {\n            navigation.resetRoot(action.payload);\n          } else {\n            navigation.dispatch(action);\n          }\n        }\n      }\n    });\n  }, [ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (ref.current && previousStateLengthRef.current === undefined) {\n      previousStateLengthRef.current = getStateLength(ref.current.getRootState());\n    }\n\n    if (ref.current && location.pathname + location.search === '/') {\n      var _ref3, _history$state2;\n\n      history.replaceState({\n        index: (_ref3 = (_history$state2 = history.state) == null ? void 0 : _history$state2.index) != null ? _ref3 : 0\n      }, '', getPathFromStateRef.current(ref.current.getRootState(), configRef.current));\n    }\n\n    var unsubscribe = (_ref$current = ref.current) == null ? void 0 : _ref$current.addListener('state', function () {\n      var _previousStateLengthR, _ref4, _history$state3;\n\n      var navigation = ref.current;\n\n      if (!navigation) {\n        return;\n      }\n\n      var state = navigation.getRootState();\n      var path = getPathFromStateRef.current(state, configRef.current);\n      var previousStateLength = (_previousStateLengthR = previousStateLengthRef.current) != null ? _previousStateLengthR : 1;\n      var stateLength = getStateLength(state);\n\n      if (pendingStateMultiUpdateRef.current) {\n        if (location.pathname + location.search === path) {\n          pendingStateMultiUpdateRef.current = false;\n        } else {\n          return;\n        }\n      }\n\n      previousStateLengthRef.current = stateLength;\n\n      if (pendingStateUpdateRef.current && location.pathname + location.search === path) {\n        pendingStateUpdateRef.current = false;\n        return;\n      }\n\n      var index = (_ref4 = (_history$state3 = history.state) == null ? void 0 : _history$state3.index) != null ? _ref4 : 0;\n\n      if (previousStateLength === stateLength) {\n        if (location.pathname + location.search !== path) {\n          history.replaceState({\n            index: index\n          }, '', path);\n          previousHistoryIndexRef.current = index;\n        }\n      } else if (stateLength > previousStateLength) {\n        for (var i = 0, l = stateLength - previousStateLength; i < l; i++) {\n          index++;\n          history.pushState({\n            index: index\n          }, '', path);\n        }\n\n        previousHistoryIndexRef.current = index;\n      } else if (previousStateLength > stateLength) {\n        var delta = previousStateLength - stateLength;\n        pendingIndexChangeRef.current = index - delta;\n        history.go(-delta);\n      }\n    });\n    return unsubscribe;\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getStateFromPath","getPathFromState","getStateLength","length","state","focusedState","isUsingLinking","prefixes","config","getStateFromPathDefault","getPathFromStateDefault","React","prefixesRef","configRef","getStateFromPathRef","getPathFromStateRef","getInitialState","path","location","previousStateLengthRef","previousHistoryIndexRef","pendingIndexChangeRef","pendingStateUpdateRef","pendingStateMultiUpdateRef","numberOfIndicesAhead","window","navigation","ref","previousHistoryIndex","historyIndex","history","canGoBack","numberOfBacks","index","i","action","getActionFromState","unsubscribe","previousStateLength","stateLength","l","delta"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { LinkingOptions } from './types';\n\nconst getStateLength = (state: NavigationState) => {\n  let length = 0;\n\n  if (state.history) {\n    length = state.history.length;\n  } else {\n    length = state.index + 1;\n  }\n\n  const focusedState = state.routes[state.index].state;\n\n  if (focusedState && !focusedState.stale) {\n    // If the focused route has history entries, we need to count them as well\n    length += getStateLength(focusedState as NavigationState) - 1;\n  }\n\n  return length;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    prefixes,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (isUsingLinking) {\n      throw new Error(\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since URL integration should only be handled in one place to avoid conflicts.\"\n      );\n    } else {\n      isUsingLinking = true;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const prefixesRef = React.useRef(prefixes);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    prefixesRef.current = prefixes;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, getPathFromState, getStateFromPath, prefixes]);\n\n  const getInitialState = React.useCallback(() => {\n    const path = location.pathname + location.search;\n\n    if (path) {\n      return getStateFromPathRef.current(path, configRef.current);\n    } else {\n      return undefined;\n    }\n  }, []);\n\n  const previousStateLengthRef = React.useRef<number | undefined>(undefined);\n  const previousHistoryIndexRef = React.useRef(0);\n\n  const pendingIndexChangeRef = React.useRef<number | undefined>();\n  const pendingStateUpdateRef = React.useRef<boolean>(false);\n  const pendingStateMultiUpdateRef = React.useRef<boolean>(false);\n\n  // If we're navigating ahead >1, we're not restoring whole state,\n  // but just navigate to the selected route not caring about previous routes\n  // therefore if we need to go back, we need to pop screen and navigate to the new one\n  // Possibly, we will need to reuse the same mechanism.\n  // E.g. if we went ahead+4 (numberOfIndicesAhead = 3), and back-2,\n  // actually we need to pop the screen we navigated\n  // and navigate again, setting numberOfIndicesAhead to 1.\n  const numberOfIndicesAhead = React.useRef(0);\n\n  React.useEffect(() => {\n    window.addEventListener('popstate', () => {\n      const navigation = ref.current;\n\n      if (!navigation) {\n        return;\n      }\n\n      const previousHistoryIndex = previousHistoryIndexRef.current;\n      const historyIndex = history.state?.index ?? 0;\n\n      previousHistoryIndexRef.current = historyIndex;\n\n      if (pendingIndexChangeRef.current === historyIndex) {\n        pendingIndexChangeRef.current = undefined;\n        return;\n      }\n\n      const state = navigation.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      let canGoBack = true;\n      let numberOfBacks = 0;\n\n      if (previousHistoryIndex === historyIndex) {\n        if (location.pathname + location.search !== path) {\n          pendingStateUpdateRef.current = true;\n          history.replaceState({ index: historyIndex }, '', path);\n        }\n      } else if (previousHistoryIndex > historyIndex) {\n        numberOfBacks =\n          previousHistoryIndex - historyIndex - numberOfIndicesAhead.current;\n\n        if (numberOfBacks > 0) {\n          pendingStateMultiUpdateRef.current = true;\n\n          if (numberOfBacks > 1) {\n            pendingStateMultiUpdateRef.current = true;\n          }\n\n          pendingStateUpdateRef.current = true;\n\n          for (let i = 0; i < numberOfBacks; i++) {\n            navigation.goBack();\n          }\n        } else {\n          canGoBack = false;\n        }\n      }\n\n      if (previousHistoryIndex < historyIndex || !canGoBack) {\n        if (canGoBack) {\n          numberOfIndicesAhead.current =\n            historyIndex - previousHistoryIndex - 1;\n        } else {\n          navigation.goBack();\n          numberOfIndicesAhead.current -= previousHistoryIndex - historyIndex;\n        }\n\n        const state = getStateFromPathRef.current(\n          location.pathname + location.search,\n          configRef.current\n        );\n\n        pendingStateMultiUpdateRef.current = true;\n\n        if (state) {\n          const action = getActionFromState(state);\n\n          pendingStateUpdateRef.current = true;\n\n          if (action.type === 'RESET_ROOT') {\n            navigation.resetRoot(action.payload);\n          } else {\n            navigation.dispatch(action);\n          }\n        }\n      }\n    });\n  }, [ref]);\n\n  React.useEffect(() => {\n    if (ref.current && previousStateLengthRef.current === undefined) {\n      previousStateLengthRef.current = getStateLength(\n        ref.current.getRootState()\n      );\n    }\n\n    if (ref.current && location.pathname + location.search === '/') {\n      history.replaceState(\n        { index: history.state?.index ?? 0 },\n        '',\n        getPathFromStateRef.current(\n          ref.current.getRootState(),\n          configRef.current\n        )\n      );\n    }\n\n    const unsubscribe = ref.current?.addListener('state', () => {\n      const navigation = ref.current;\n\n      if (!navigation) {\n        return;\n      }\n\n      const state = navigation.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      const previousStateLength = previousStateLengthRef.current ?? 1;\n      const stateLength = getStateLength(state);\n\n      if (pendingStateMultiUpdateRef.current) {\n        if (location.pathname + location.search === path) {\n          pendingStateMultiUpdateRef.current = false;\n        } else {\n          return;\n        }\n      }\n\n      previousStateLengthRef.current = stateLength;\n\n      if (\n        pendingStateUpdateRef.current &&\n        location.pathname + location.search === path\n      ) {\n        pendingStateUpdateRef.current = false;\n        return;\n      }\n\n      let index = history.state?.index ?? 0;\n\n      if (previousStateLength === stateLength) {\n        // If no new enrties were added to history in our navigation state, we want to replaceState\n        if (location.pathname + location.search !== path) {\n          history.replaceState({ index }, '', path);\n          previousHistoryIndexRef.current = index;\n        }\n      } else if (stateLength > previousStateLength) {\n        // If new enrties were added, pushState until we have same length\n        // This won't be accurate if multiple enrties were added at once, but that's the best we can do\n        for (let i = 0, l = stateLength - previousStateLength; i < l; i++) {\n          index++;\n          history.pushState({ index }, '', path);\n        }\n\n        previousHistoryIndexRef.current = index;\n      } else if (previousStateLength > stateLength) {\n        const delta = previousStateLength - stateLength;\n\n        // We need to set this to ignore the `popstate` event\n        pendingIndexChangeRef.current = index - delta;\n\n        // If new enrties were removed, go back so that we have same length\n        history.go(-delta);\n      }\n    });\n\n    return unsubscribe;\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}