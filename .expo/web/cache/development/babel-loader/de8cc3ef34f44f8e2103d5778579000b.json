{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\DEV\\\\argon-react-native-master\\\\argon-react-native-master\\\\App.js\";\n\nimport React, { useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default (function (props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useFonts = useFonts({\n    'ArgonExtra': require(\"./assets/font/argon.ttf\")\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  function _loadResourcesAsync() {\n    return Promise.all(_toConsumableArray(cacheImages(assetImages)));\n  }\n\n  function _handleLoadingError(error) {\n    console.warn(error);\n  }\n\n  ;\n\n  function _handleFinishLoading() {\n    setLoading(true);\n  }\n\n  ;\n\n  if (!fontsLoaded && !isLoadingComplete) {\n    return React.createElement(AppLoading, {\n      startAsync: _loadResourcesAsync,\n      onError: _handleLoadingError,\n      onFinish: _handleFinishLoading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    });\n  } else if (fontsLoaded) {\n    return React.createElement(NavigationContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, React.createElement(GalioProvider, {\n      theme: argonTheme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, React.createElement(Block, {\n      flex: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, React.createElement(Screens, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return null;\n  }\n});","map":{"version":3,"sources":["C:/DEV/argon-react-native-master/argon-react-native-master/App.js"],"names":["React","useState","AppLoading","useFonts","Asset","Block","GalioProvider","NavigationContainer","enableScreens","Screens","Images","articles","argonTheme","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","props","isLoadingComplete","setLoading","require","fontsLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAGA,SAASC,aAAT,QAA8B,sBAA9B;AACAA,aAAa;AAEb,OAAOC,OAAP;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,UAA3B;AAGA,IAAMC,WAAW,GAAG,CAClBH,MAAM,CAACI,UADW,EAElBJ,MAAM,CAACK,cAFW,EAGlBL,MAAM,CAACM,IAHW,EAIlBN,MAAM,CAACO,GAJW,EAKlBP,MAAM,CAACQ,SALW,EAMlBR,MAAM,CAACS,OANW,EAOlBT,MAAM,CAACU,WAPW,CAApB;AAWAT,QAAQ,CAACU,GAAT,CAAa,UAAAC,OAAO;AAAA,SAAIT,WAAW,CAACU,IAAZ,CAAiBD,OAAO,CAACE,KAAzB,CAAJ;AAAA,CAApB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACL,GAAP,CAAW,UAAAG,KAAK,EAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOG,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOpB,KAAK,CAACyB,UAAN,CAAiBL,KAAjB,EAAwBM,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;AAED,gBAAe,UAAAC,KAAK,EAAI;AAAA,kBACkB9B,QAAQ,CAAC,KAAD,CAD1B;AAAA;AAAA,MACf+B,iBADe;AAAA,MACIC,UADJ;;AAAA,kBAEF9B,QAAQ,CAAC;AAC3B,kBAAc+B,OAAO;AADM,GAAD,CAFN;AAAA;AAAA,MAEjBC,WAFiB;;AAMtB,WAASC,mBAAT,GAA+B;AAC7B,WAAOC,OAAO,CAACC,GAAR,oBAAgBb,WAAW,CAACZ,WAAD,CAA3B,EAAP;AACD;;AAED,WAAS0B,mBAAT,CAA6BC,KAA7B,EAAoC;AAGlCC,IAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD;;AAAA;;AAEF,WAASG,oBAAT,GAAgC;AAC7BV,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAAA;;AAED,MAAG,CAACE,WAAD,IAAgB,CAACH,iBAApB,EAAuC;AACrC,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEI,mBADd;AAEE,MAAA,OAAO,EAAEG,mBAFX;AAGE,MAAA,QAAQ,EAAEI,oBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARD,MAQO,IAAGR,WAAH,EAAgB;AACrB,WACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEvB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF;AASD,GAVM,MAUA;AACL,WAAO,IAAP;AACD;AACF,CAzCD","sourcesContent":["import React, {useState} from \"react\";\nimport { Image } from \"react-native\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from '@use-expo/font';\nimport { Asset } from \"expo-asset\";\nimport { Block, GalioProvider } from \"galio-framework\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\n// Before rendering any navigation stack\nimport { enableScreens } from \"react-native-screens\";\nenableScreens();\n\nimport Screens from \"./navigation/Screens\";\nimport { Images, articles, argonTheme } from \"./constants\";\n\n// cache app images\nconst assetImages = [\n  Images.Onboarding,\n  Images.LogoOnboarding,\n  Images.Logo,\n  Images.Pro,\n  Images.ArgonLogo,\n  Images.iOSLogo,\n  Images.androidLogo\n];\n\n// cache product images\narticles.map(article => assetImages.push(article.image));\n\nfunction cacheImages(images) {\n  return images.map(image => {\n    if (typeof image === \"string\") {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nexport default props => {\n  const [isLoadingComplete, setLoading] = useState(false);\n  let [fontsLoaded] = useFonts({\n    'ArgonExtra': require('./assets/font/argon.ttf'),\n  });\n\n  function _loadResourcesAsync() {\n    return Promise.all([...cacheImages(assetImages)]);\n  }\n\n  function _handleLoadingError(error) {\n    // In this case, you might want to report the error to your error\n    // reporting service, for example Sentry\n    console.warn(error);\n  };\n\n function _handleFinishLoading() {\n    setLoading(true);\n  };\n\n  if(!fontsLoaded && !isLoadingComplete) {\n    return (\n      <AppLoading\n        startAsync={_loadResourcesAsync}\n        onError={_handleLoadingError}\n        onFinish={_handleFinishLoading}\n      />\n    );\n  } else if(fontsLoaded) {\n    return (\n      <NavigationContainer>\n        <GalioProvider theme={argonTheme}>\n          <Block flex>\n            <Screens />\n          </Block>\n        </GalioProvider>\n      </NavigationContainer>\n    );\n  } else {\n    return null\n  }\n}\n\n// export default class App extends React.Component {\n//   state = {\n//     isLoadingComplete: false\n//   };\n\n//   render() {\n//     if (!this.state.isLoadingComplete) {\n//       return (\n//         <AppLoading\n//           startAsync={this._loadResourcesAsync}\n//           onError={this._handleLoadingError}\n//           onFinish={this._handleFinishLoading}\n//         />\n//       );\n//     } else {\n//       return (\n//         <NavigationContainer>\n//           <GalioProvider theme={argonTheme}>\n//             <Block flex>\n//               <Screens />\n//             </Block>\n//           </GalioProvider>\n//         </NavigationContainer>\n//       );\n//     }\n//   }\n\n//   _loadResourcesAsync = async () => {\n//     return Promise.all([...cacheImages(assetImages)]);\n//   };\n\n//   _handleLoadingError = error => {\n//     // In this case, you might want to report the error to your error\n//     // reporting service, for example Sentry\n//     console.warn(error);\n//   };\n\n//   _handleFinishLoading = () => {\n//     this.setState({ isLoadingComplete: true });\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}