{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/drawer/src/views/DrawerView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { DrawerActions } from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      }\n    }));\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle;\n\n  var _React$useState = React.useState([state.index]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var _React$useState3 = React.useState(function () {\n    return getDefaultDrawerWidth(Dimensions.get('window'));\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      drawerWidth = _React$useState4[0],\n      setDrawerWidth = _React$useState4[1];\n\n  var drawerGestureRef = React.useRef(null);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = Boolean(state.history.find(function (it) {\n    return it.type === 'drawer';\n  }));\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread({}, DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(function () {\n    var subscription;\n\n    if (isDrawerOpen) {\n      subscription = BackHandler.addEventListener('hardwareBackPress', function () {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return function () {\n      var _subscription;\n\n      return (_subscription = subscription) == null ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  React.useEffect(function () {\n    var updateWidth = function updateWidth(_ref3) {\n      var window = _ref3.window;\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n    return function () {\n      return Dimensions.removeEventListener('change', updateWidth);\n    };\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [state.index]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref4) {\n    var progress = _ref4.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      }\n    }, drawerContent(_objectSpread({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    return React.createElement(ScreenContainer, {\n      style: styles.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        return null;\n      }\n\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        }\n      }, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var gestureEnabled = descriptors[activeKey].options.gestureEnabled;\n  return React.createElement(GestureHandlerWrapper, {\n    style: styles.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    }\n  }, React.createElement(SafeAreaProviderCompat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    }\n  }, React.createElement(DrawerGestureContext.Provider, {\n    value: drawerGestureRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    }\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    onGestureRef: function onGestureRef(ref) {\n      drawerGestureRef.current = ref;\n    },\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: drawerWidth,\n      backgroundColor: colors.card\n    }, drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerPostion: drawerPosition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","state","navigation","descriptors","lazy","drawerContent","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","loaded","setLoaded","React","drawerWidth","setDrawerWidth","Dimensions","drawerGestureRef","colors","useTheme","isDrawerOpen","Boolean","it","handleDrawerOpen","DrawerActions","target","handleDrawerClose","type","subscription","BackHandler","updateWidth","window","renderNavigationView","progress","renderContent","styles","descriptor","route","unmountOnBlur","isFocused","StyleSheet","opacity","activeKey","gestureEnabled","backgroundColor","content","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport {\n  DrawerNavigationState,\n  DrawerActions,\n} from '@react-navigation/routers';\nimport { useTheme } from '@react-navigation/native';\n\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [drawerWidth, setDrawerWidth] = React.useState(() =>\n    getDefaultDrawerWidth(Dimensions.get('window'))\n  );\n\n  const drawerGestureRef = React.useRef<PanGestureHandler>(null);\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = Boolean(state.history.find(it => it.type === 'drawer'));\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateWidth = ({ window }: { window: ScaledSize }) => {\n      setDrawerWidth(getDefaultDrawerWidth(window));\n    };\n\n    Dimensions.addEventListener('change', updateWidth);\n\n    return () => Dimensions.removeEventListener('change', updateWidth);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled } = descriptors[activeKey].options;\n\n  return (\n    <GestureHandlerWrapper style={styles.content}>\n      <SafeAreaProviderCompat>\n        <DrawerGestureContext.Provider value={drawerGestureRef}>\n          <Drawer\n            open={isDrawerOpen}\n            gestureEnabled={gestureEnabled}\n            onOpen={handleDrawerOpen}\n            onClose={handleDrawerClose}\n            onGestureRef={ref => {\n              // @ts-ignore\n              drawerGestureRef.current = ref;\n            }}\n            gestureHandlerProps={gestureHandlerProps}\n            drawerType={drawerType}\n            drawerPosition={drawerPosition}\n            sceneContainerStyle={[\n              { backgroundColor: colors.background },\n              sceneContainerStyle,\n            ]}\n            drawerStyle={[\n              { width: drawerWidth, backgroundColor: colors.card },\n              drawerStyle,\n            ]}\n            overlayStyle={{ backgroundColor: overlayColor }}\n            swipeEdgeWidth={edgeWidth}\n            swipeDistanceThreshold={minSwipeDistance}\n            hideStatusBar={hideStatusBar}\n            statusBarAnimation={statusBarAnimation}\n            renderDrawerContent={renderNavigationView}\n            renderSceneContent={renderContent}\n            keyboardDismissMode={keyboardDismissMode}\n            drawerPostion={drawerPosition}\n          />\n        </DrawerGestureContext.Provider>\n      </SafeAreaProviderCompat>\n    </GestureHandlerWrapper>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}