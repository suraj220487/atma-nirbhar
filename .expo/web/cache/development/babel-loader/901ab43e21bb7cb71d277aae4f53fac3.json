{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/drawer/src/views/DrawerItem.tsx\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\"]);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    }\n  }), React.createElement(TouchableItem, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: focused ? ['selected'] : [],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    }\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    }\n  }, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    }\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    }\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["colors","useTheme","icon","label","labelStyle","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","style","onPress","rest","props","borderRadius","StyleSheet","color","backgroundColor","iconNode","size","styles","marginLeft","marginVertical","fontWeight","container","marginHorizontal","wrapper","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text)\n      .alpha(0.68)\n      .rgb()\n      .string(),\n    activeBackgroundColor = Color(activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <TouchableItem\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </TouchableItem>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}