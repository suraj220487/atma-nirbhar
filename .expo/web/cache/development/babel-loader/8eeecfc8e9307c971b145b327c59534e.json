{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport useCompatNavigation from \"./useCompatNavigation\";\nexport default function withNavigation(Comp) {\n  var WrappedComponent = function WrappedComponent(_ref) {\n    var onRef = _ref.onRef,\n        rest = _objectWithoutProperties(_ref, [\"onRef\"]);\n\n    var navigation = useCompatNavigation();\n    return React.createElement(Comp, _extends({\n      ref: onRef,\n      navigation: navigation\n    }, rest));\n  };\n\n  WrappedComponent.displayName = \"withNavigation(\".concat(Comp.displayName || Comp.name, \")\");\n  return WrappedComponent;\n}","map":{"version":3,"sources":["withNavigation.tsx"],"names":["WrappedComponent","rest","navigation","useCompatNavigation","Comp"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,mBAAA;AAOA,eAAe,SAAA,cAAA,CAAA,IAAA,EAIJ;AACT,MAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,OAOC;AAAA,QAPA,KAOA,QAPA,KAOA;AAAA,QALrBC,IAKqB;;AACxB,QAAMC,UAAU,GAAGC,mBADK,EACxB;AAGA,WAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,MAAA,GAAG,EAAT,KAAA;AAAkB,MAAA,UAAU,EAAED;AAA9B,KAAA,EAAP,IAAO,CAAA,CAAP;AAXF,GAAA;;AAcAF,EAAAA,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA,MAAAA,CACEI,IAAI,CAAJA,WAAAA,IAAoBA,IAAI,CAD1BJ,IAAAA,EAAAA,GAAAA,CAAAA;AAIA,SAAA,gBAAA;AACD","sourcesContent":["import * as React from 'react';\nimport type { NavigationProp, ParamListBase } from '@react-navigation/native';\nimport useCompatNavigation from './useCompatNavigation';\nimport type { CompatNavigationProp } from './types';\n\ntype InjectedProps<T extends NavigationProp<ParamListBase>> = {\n  navigation: CompatNavigationProp<T>;\n};\n\nexport default function withNavigation<\n  T extends NavigationProp<ParamListBase>,\n  P extends InjectedProps<T>,\n  C extends React.ComponentType<P>\n>(Comp: C) {\n  const WrappedComponent = ({\n    onRef,\n    ...rest\n  }: Exclude<P, InjectedProps<T>> & {\n    onRef?: C extends React.ComponentClass<any>\n      ? React.Ref<InstanceType<C>>\n      : never;\n  }): React.ReactElement => {\n    const navigation = useCompatNavigation<T>();\n\n    // @ts-expect-error: type checking HOC is hard\n    return <Comp ref={onRef} navigation={navigation} {...rest} />;\n  };\n\n  WrappedComponent.displayName = `withNavigation(${\n    Comp.displayName || Comp.name\n  })`;\n\n  return WrappedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}