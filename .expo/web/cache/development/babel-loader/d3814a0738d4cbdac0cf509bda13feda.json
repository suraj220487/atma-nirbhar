{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/drawer/src/views/Overlay.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar interpolate = Animated.interpolate,\n    cond = Animated.cond,\n    greaterThan = Animated.greaterThan;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"progress\", \"style\"]);\n\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, animatedStyle, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    }\n  }));\n});\nvar styles = StyleSheet.create({\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }, Platform.select({\n    web: {\n      WebkitTapHighlightColor: 'transparent'\n    },\n    default: {}\n  }))\n});\nexport default Overlay;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","cond","greaterThan","Animated","PROGRESS_EPSILON","Overlay","React","progress","style","props","animatedStyle","opacity","inputRange","outputRange","zIndex","styles","StyleSheet","overlay","backgroundColor","Platform","web","WebkitTapHighlightColor","default"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,QAAA,MAAA,yBAAA;AAEQA,IAAAA,W,GAAmCG,Q,CAAnCH,WAAAA;AAAAA,IAAaC,I,GAAsBE,Q,CAAtBF,IAAbD;AAAAA,IAAmBE,W,GAAgBC,Q,CAAhBD,WAAnBF;AAER,IAAMI,gBAAgB,GAAtB,IAAA;AAMA,IAAMC,OAAO,GAAGC,KAAK,CAALA,UAAAA,CAAiB,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAG/B;AAFEC,MAAAA,QAEF,GAAA,IAAA,CAFEA,QAAAA;AAAAA,MAAUC,KAEZ,GAAA,IAAA,CAFYA,KAAVD;AAAAA,MAAoBE,KAEtB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,OAAA,CAAA,CAFEF;;AAGF,MAAMG,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEX,WAAW,CAAA,QAAA,EAAW;AAC7BY,MAAAA,UAAU,EAAE,CAAA,gBAAA,EADiB,CACjB,CADiB;AAE7BC,MAAAA,WAAW,EAAE,CAAA,CAAA,EAHK,CAGL;AAFgB,KAAX,CADA;AAQpBC,IAAAA,MAAM,EAAEb,IAAI,CAACC,WAAW,CAAA,QAAA,EAAZ,gBAAY,CAAZ,EAAA,CAAA,EAA6C,CAR3D,CAQc;AARQ,GAAtB;AAWA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,KAAK,EAAE,CAACa,MAAM,CAAP,OAAA,EAAA,aAAA,EAHT,KAGS,CAHT;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EADF;AACE;AAAA,GAAA,CAAA,CADF;AAfF,CAAgBT,CAAhB;AAwBA,IAAMS,MAAM,GAAGC,UAAU,CAAVA,MAAAA,CAAkB;AAC/BC,EAAAA,OAAO,EAAA,aAAA,CAAA,EAAA,EACFD,UAAU,CADR,kBAAA,EAAA;AAELE,IAAAA,eAAe,EAFV;AAAA,GAAA,EAGFC,QAAQ,CAARA,MAAAA,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AAEHC,MAAAA,uBAAuB,EAHR;AACZ,KADY;AAKjBC,IAAAA,OAAO,EATb;AAIuB,GAAhBH,CAHE;AADwB,CAAlBH,CAAf;AAcA,eAAA,OAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst { interpolate, cond, greaterThan } = Animated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, animatedStyle, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    ...Platform.select({\n      web: {\n        // Disable touch highlight on mobile Safari.\n        WebkitTapHighlightColor: 'transparent',\n      },\n      default: {},\n    }),\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}