{"ast":null,"code":"import * as React from 'react';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  var navigation = useNavigation();\n  var route = useRoute();\n  React.useEffect(function () {\n    var current = navigation;\n\n    while (current && current.dangerouslyGetState().type !== 'tab') {\n      current = current.dangerouslyGetParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    var unsubscribe = current.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      var isFirst = navigation === current || navigation.dangerouslyGetState().routes[0].key === route.key;\n      requestAnimationFrame(function () {\n        var scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"sources":["useScrollToTop.tsx"],"names":["ref","navigation","useNavigation","route","useRoute","React","current","unsubscribe","isFocused","isFirst","requestAnimationFrame","scrollable","getScrollableNode","e","y","animated"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,QAAA,QAAA,wBAAA;;AAeA,SAAA,iBAAA,CAAA,GAAA,EAAoE;AAClE,MAAIA,GAAG,CAAHA,OAAAA,IAAJ,IAAA,EAAyB;AACvB,WAAA,IAAA;AAGF;;AAAA,MACE,iBAAiBA,GAAG,CAApB,OAAA,IACA,cAAcA,GAAG,CADjB,OAAA,IAEA,oBAAoBA,GAAG,CAFvB,OAAA,IAGA,6BAA6BA,GAAG,CAJlC,OAAA,EAKE;AAEA,WAAOA,GAAG,CAAV,OAAA;AAPF,GAAA,MAQO,IAAI,wBAAwBA,GAAG,CAA/B,OAAA,EAAyC;AAG9C,WAAOA,GAAG,CAAHA,OAAAA,CAAP,kBAAOA,EAAP;AAHK,GAAA,MAIA,IAAI,aAAaA,GAAG,CAApB,OAAA,EAA8B;AAKnC,WAAOA,GAAG,CAAHA,OAAAA,CAAP,OAAOA,EAAP;AALK,GAAA,MAMA;AACL,WAAOA,GAAG,CAAV,OAAA;AAEH;AAED;;AAAA,eAAe,SAAA,cAAA,CAAA,GAAA,EAEb;AACA,MAAMC,UAAU,GAAGC,aAAnB,EAAA;AACA,MAAMC,KAAK,GAAGC,QAAd,EAAA;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,OAAO,GAAX,UAAA;;AAIA,WAAOA,OAAO,IAAIA,OAAO,CAAPA,mBAAAA,GAAAA,IAAAA,KAAlB,KAAA,EAAgE;AAC9DA,MAAAA,OAAO,GAAGA,OAAO,CAAjBA,oBAAUA,EAAVA;AAGF;;AAAA,QAAI,CAAJ,OAAA,EAAc;AACZ;AAGF;;AAAA,QAAMC,WAAW,GAAGD,OAAO,CAAPA,WAAAA,CAAAA,UAAAA,EAKlB,UAAA,CAAA,EAAmC;AAEjC,UAAME,SAAS,GAAGP,UAAU,CAA5B,SAAkBA,EAAlB;AAIA,UAAMQ,OAAO,GACXR,UAAU,KAAVA,OAAAA,IACAA,UAAU,CAAVA,mBAAAA,GAAAA,MAAAA,CAAAA,CAAAA,EAAAA,GAAAA,KAAmDE,KAAK,CAF1D,GAAA;AAMAO,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YAAMC,UAAU,GAAGC,iBAAiB,CAApC,GAAoC,CAApC;;AAEA,YAAIJ,SAAS,IAATA,OAAAA,IAAAA,UAAAA,IAAsC,CAACK,CAAC,CAA5C,gBAAA,EAA+D;AAC7D,cAAI,iBAAJ,UAAA,EAAiC;AAC/BF,YAAAA,UAAU,CAAVA,WAAAA;AADF,WAAA,MAEO,IAAI,cAAJ,UAAA,EAA8B;AACnCA,YAAAA,UAAU,CAAVA,QAAAA,CAAoB;AAAEG,cAAAA,CAAC,EAAH,CAAA;AAAQC,cAAAA,QAAQ,EAApCJ;AAAoB,aAApBA;AADK,WAAA,MAEA,IAAI,oBAAJ,UAAA,EAAoC;AACzCA,YAAAA,UAAU,CAAVA,cAAAA,CAA0B;AAAEG,cAAAA,CAAC,EAAH,CAAA;AAAQC,cAAAA,QAAQ,EAA1CJ;AAA0B,aAA1BA;AADK,WAAA,MAEA,IAAI,6BAAJ,UAAA,EAA6C;AAClDA,YAAAA,UAAU,CAAVA,uBAAAA,CAAmC;AAAEG,cAAAA,CAAC,EAAH,CAAA;AAAQC,cAAAA,QAAQ,EAAnDJ;AAAmC,aAAnCA;AAEH;AACF;AAdDD,OAAqB,CAArBA;AAjBJ,KAAoBJ,CAApB;AAmCA,WAAA,WAAA;AAhDFD,GAAAA,EAiDG,CAAA,UAAA,EAAA,GAAA,EAAkBF,KAAK,CAjD1BE,GAiDG,CAjDHA;AAkDD","sourcesContent":["import * as React from 'react';\nimport { useNavigation, useRoute, EventArg } from '@react-navigation/core';\n\ntype ScrollOptions = { y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: ScrollOptions): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): ScrollableView }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let current = navigation;\n\n    // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n    while (current && current.dangerouslyGetState().type !== 'tab') {\n      current = current.dangerouslyGetParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener(\n      // We don't wanna import tab types here to avoid extra deps\n      // in addition, there are multiple tab implementations\n      // @ts-ignore\n      'tabPress',\n      (e: EventArg<'tabPress', true>) => {\n        // We should scroll to top only when the screen is focused\n        const isFocused = navigation.isFocused();\n\n        // In a nested stack navigator, tab press resets the stack to first screen\n        // So we should scroll to top only when we are on first screen\n        const isFirst =\n          navigation === current ||\n          navigation.dangerouslyGetState().routes[0].key === route.key;\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          const scrollable = getScrollableNode(ref);\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({ y: 0, animated: true });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({ y: 0, animated: true });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n            }\n          }\n        });\n      }\n    );\n\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n"]},"metadata":{},"sourceType":"module"}