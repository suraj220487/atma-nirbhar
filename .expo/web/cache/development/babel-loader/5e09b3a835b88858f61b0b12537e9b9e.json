{"ast":null,"code":"import * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nexport default function NavigationEvents(props) {\n  var navigation = useNavigation();\n  var propsRef = React.useRef(props);\n  React.useEffect(function () {\n    propsRef.current = props;\n  });\n  React.useEffect(function () {\n    var unsubFocus = navigation.addListener('focus', function () {\n      var _propsRef$current$onW, _propsRef$current;\n\n      (_propsRef$current$onW = (_propsRef$current = propsRef.current).onWillFocus) === null || _propsRef$current$onW === void 0 ? void 0 : _propsRef$current$onW.call(_propsRef$current);\n    });\n    var unsubBlur = navigation.addListener('blur', function () {\n      var _propsRef$current$onW2, _propsRef$current2;\n\n      (_propsRef$current$onW2 = (_propsRef$current2 = propsRef.current).onWillBlur) === null || _propsRef$current$onW2 === void 0 ? void 0 : _propsRef$current$onW2.call(_propsRef$current2);\n    });\n    var unsubTransitionEnd = navigation.addListener('transitionEnd', function () {\n      if (navigation.isFocused()) {\n        var _propsRef$current$onD, _propsRef$current3;\n\n        (_propsRef$current$onD = (_propsRef$current3 = propsRef.current).onDidFocus) === null || _propsRef$current$onD === void 0 ? void 0 : _propsRef$current$onD.call(_propsRef$current3);\n      } else {\n        var _propsRef$current$onD2, _propsRef$current4;\n\n        (_propsRef$current$onD2 = (_propsRef$current4 = propsRef.current).onDidBlur) === null || _propsRef$current$onD2 === void 0 ? void 0 : _propsRef$current$onD2.call(_propsRef$current4);\n      }\n    });\n    return function () {\n      unsubFocus();\n      unsubBlur();\n      unsubTransitionEnd();\n    };\n  }, [navigation]);\n  return null;\n}","map":{"version":3,"sources":["NavigationEvents.tsx"],"names":["navigation","useNavigation","propsRef","React","unsubFocus","unsubBlur","unsubTransitionEnd"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,0BAAA;AASA,eAAe,SAAA,gBAAA,CAAA,KAAA,EAAwC;AACrD,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AACA,MAAMC,QAAQ,GAAGC,KAAK,CAALA,MAAAA,CAAjB,KAAiBA,CAAjB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,KAAAA;AADFC,GAAAA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,UAAU,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAgC,YAAM;AAAA,UAAA,qBAAA,EAAA,iBAAA;;AACvD,OAAA,qBAAA,GAAA,CAAA,iBAAA,GAAA,QAAQ,CAAR,OAAA,EAAA,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,iBAAA,CAAA;AADF,KAAmB,CAAnB;AAIA,QAAMC,SAAS,GAAG,UAAU,CAAV,WAAA,CAAA,MAAA,EAA+B,YAAM;AAAA,UAAA,sBAAA,EAAA,kBAAA;;AACrD,OAAA,sBAAA,GAAA,CAAA,kBAAA,GAAA,QAAQ,CAAR,OAAA,EAAA,UAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA;AANkB,KAKF,CAAlB;AAKA,QAAMC,kBAAkB,GAAG,UAAU,CAAV,WAAA,CAAA,eAAA,EAAwC,YAAM;AACvE,UAAIN,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAAA,YAAA,qBAAA,EAAA,kBAAA;;AAC1B,SAAA,qBAAA,GAAA,CAAA,kBAAA,GAAA,QAAQ,CAAR,OAAA,EAAA,UAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA;AADF,OAAA,MAEO;AAAA,YAAA,sBAAA,EAAA,kBAAA;;AACL,SAAA,sBAAA,GAAA,CAAA,kBAAA,GAAA,QAAQ,CAAR,OAAA,EAAA,SAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAA,IAAA,CAAA,kBAAA,CAAA;AACD;AALH,KAA2B,CAA3B;AAQA,WAAO,YAAM;AACXI,MAAAA,UAAU;AACVC,MAAAA,SAAS;AACTC,MAAAA,kBAAkB;AAHpB,KAAA;AAlBFH,GAAAA,EAuBG,CAvBHA,UAuBG,CAvBHA;AAyBA,SAAA,IAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useNavigation } from '@react-navigation/native';\n\ntype Props = {\n  onWillFocus?: () => void;\n  onDidFocus?: () => void;\n  onWillBlur?: () => void;\n  onDidBlur?: () => void;\n};\n\nexport default function NavigationEvents(props: Props) {\n  const navigation = useNavigation();\n  const propsRef = React.useRef(props);\n\n  React.useEffect(() => {\n    propsRef.current = props;\n  });\n\n  React.useEffect(() => {\n    const unsubFocus = navigation.addListener('focus', () => {\n      propsRef.current.onWillFocus?.();\n    });\n\n    const unsubBlur = navigation.addListener('blur', () => {\n      propsRef.current.onWillBlur?.();\n    });\n\n    // @ts-expect-error: transitionEnd may not exist on this navigator\n    const unsubTransitionEnd = navigation.addListener('transitionEnd', () => {\n      if (navigation.isFocused()) {\n        propsRef.current.onDidFocus?.();\n      } else {\n        propsRef.current.onDidBlur?.();\n      }\n    });\n\n    return () => {\n      unsubFocus();\n      unsubBlur();\n      unsubTransitionEnd();\n    };\n  }, [navigation]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}