{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/satya/Workspace/Projects/navigation-ex/packages/drawer/src/views/Drawer.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n    Value = Animated.Value,\n    onChange = Animated.onChange,\n    clockRunning = Animated.clockRunning,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    abs = Animated.abs,\n    add = Animated.add,\n    and = Animated.and,\n    block = Animated.block,\n    call = Animated.call,\n    cond = Animated.cond,\n    divide = Animated.divide,\n    eq = Animated.eq,\n    event = Animated.event,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    max = Animated.max,\n    min = Animated.min,\n    multiply = Animated.multiply,\n    neq = Animated.neq,\n    or = Animated.or,\n    set = Animated.set,\n    sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\n\nfunction shouldEnableGesture() {\n  if (Platform.OS === 'web' && typeof navigator !== 'undefined' && typeof window !== 'undefined') {\n    var isWebAppleDevice = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  function DrawerView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isGestureEnabled = new Value(_this.props.gestureEnabled ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.gestureState = new Value(State.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(0);\n    _this.containerWidth = new Value(0);\n    _this.drawerWidth = new Value(0);\n    _this.drawerOpacity = new Value(0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold !== undefined ? _this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread({}, SPRING_CONFIG, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            value = _ref2[0];\n\n        var open = Boolean(value);\n\n        _this.handleEndInteraction();\n\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          value = _ref4[0];\n\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          value = _ref6[0];\n\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, State.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, State.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleTapStateChange = event([{\n      nativeEvent: {\n        oldState: function oldState(s) {\n          return cond(eq(s, State.ACTIVE), set(_this.manuallyTriggerSpring, TRUE));\n        }\n      }\n    }]);\n\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return _this.drawerOpacity.setValue(1);\n      });\n    };\n\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    };\n\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props = _this.props,\n          hideStatusBar = _this$props.hideStatusBar,\n          statusBarAnimation = _this$props.statusBarAnimation;\n\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          open = _this$props2.open,\n          drawerPosition = _this$props2.drawerPosition,\n          drawerType = _this$props2.drawerType,\n          gestureEnabled = _this$props2.gestureEnabled,\n          swipeDistanceThreshold = _this$props2.swipeDistanceThreshold,\n          swipeVelocityThreshold = _this$props2.swipeVelocityThreshold,\n          hideStatusBar = _this$props2.hideStatusBar;\n\n      if (prevProps.gestureEnabled !== gestureEnabled) {\n        this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n      }\n\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n\n      this.pendingOpenValue = undefined;\n\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n      }\n\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          open = _this$props3.open,\n          gestureEnabled = _this$props3.gestureEnabled,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          swipeEdgeWidth = _this$props3.swipeEdgeWidth,\n          sceneContainerStyle = _this$props3.sceneContainerStyle,\n          drawerStyle = _this$props3.drawerStyle,\n          overlayStyle = _this$props3.overlayStyle,\n          onGestureRef = _this$props3.onGestureRef,\n          renderDrawerContent = _this$props3.renderDrawerContent,\n          renderSceneContent = _this$props3.renderSceneContent,\n          gestureHandlerProps = _this$props3.gestureHandlerProps;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : 0 : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: open ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: open ? undefined : swipeEdgeWidth\n      };\n      return React.createElement(PanGestureHandler, _extends({\n        ref: onGestureRef,\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: gestureEnabled\n      }, gestureHandlerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: [{\n            translateX: contentTranslateX\n          }]\n        }, sceneContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 588\n        }\n      }, React.createElement(View, {\n        accessibilityElementsHidden: open,\n        importantForAccessibility: open ? 'no-hide-descendants' : 'auto',\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597\n        }\n      }, renderSceneContent({\n        progress: this.progress\n      })), React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this.handleTapStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        }\n      }, React.createElement(Overlay, {\n        progress: this.progress,\n        style: overlayStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        }\n      }))), React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        }\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: open,\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity,\n          zIndex: drawerType === 'back' ? -1 : 0\n        }, drawerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        }\n      }, renderDrawerContent({\n        progress: this.progress\n      }))));\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nDrawerView.defaultProps = {\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: shouldEnableGesture(),\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%'\n  },\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","Animated","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Platform","isWebAppleDevice","navigator","window","DrawerView","React","PureComponent","defaultProps","drawerPostion","I18nManager","drawerType","gestureEnabled","shouldEnableGesture","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","prevProps","open","drawerPosition","swipeDistanceThreshold","handleEndInteraction","InteractionManager","handleStartInteraction","clock","isDrawerTypeFront","isGestureEnabled","isOpen","nextIsOpen","isSwiping","gestureState","State","touchX","velocityX","gestureX","offsetX","position","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","value","Boolean","dragX","Keyboard","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","handleTapStateChange","oldState","handleContainerLayout","e","handleDrawerLayout","requestAnimationFrame","toggleDrawer","toggleStatusBar","StatusBar","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","width","left","styles","transform","opacity","zIndex","StyleSheet","container","backgroundColor","top","bottom","maxWidth","content","flex","main","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\n/**\n * Disables the pan gesture by default on Apple devices in the browser.\n * https://stackoverflow.com/a/9039885\n */\nfunction shouldEnableGesture(): boolean {\n  if (\n    Platform.OS === 'web' &&\n    typeof navigator !== 'undefined' &&\n    typeof window !== 'undefined'\n  ) {\n    const isWebAppleDevice =\n      /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    return !isWebAppleDevice;\n  }\n\n  return true;\n}\n\nexport default class DrawerView extends React.PureComponent<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: shouldEnableGesture(),\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      gestureEnabled,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (prevProps.gestureEnabled !== gestureEnabled) {\n      this.isGestureEnabled.setValue(gestureEnabled ? TRUE : FALSE);\n    }\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n  private isGestureEnabled = new Value(\n    this.props.gestureEnabled ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, State.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() => this.drawerOpacity.setValue(1));\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={onGestureRef}\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={gestureEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={styles.main}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              {\n                transform: [{ translateX: contentTranslateX }],\n              },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={open}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'auto'}\n              style={styles.content}\n            >\n              {renderSceneContent({ progress: this.progress })}\n            </View>\n            <TapGestureHandler onHandlerStateChange={this.handleTapStateChange}>\n              <Overlay progress={this.progress} style={overlayStyle} />\n            </TapGestureHandler>\n          </Animated.View>\n          <Animated.Code\n            exec={block([\n              onChange(this.manuallyTriggerSpring, [\n                cond(eq(this.manuallyTriggerSpring, TRUE), [\n                  set(this.nextIsOpen, FALSE),\n                  call([], () => (this.currentOpenValue = false)),\n                ]),\n              ]),\n            ])}\n          />\n          <Animated.View\n            accessibilityViewIsModal={open}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              isRight ? { right: offset } : { left: offset },\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress: this.progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}